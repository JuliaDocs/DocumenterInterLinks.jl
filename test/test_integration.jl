using DocumenterInterLinks
using Documenter
using DocInventories
using Test

include("run_makedocs.jl")


@testset "Integration Test" begin

    # We build the documentation of DocumenterInterLinks itself as a test

    links = InterLinks(
        "Documenter" => (
            "https://documenter.juliadocs.org/stable/",
            joinpath(@__DIR__, "..", "docs", "src", "inventories", "Documenter.toml")
        ),
        "Julia" => (
            "https://docs.julialang.org/en/v1/",
            joinpath(@__DIR__, "..", "docs", "src", "inventories", "Julia.toml")
        ),
        "DocInventories" => (
            "https://github.com/JuliaDocs/DocInventories.jl/",
            joinpath(@__DIR__, "..", "docs", "src", "inventories", "DocInventories.toml")
        ),
        "sphinx" => "https://www.sphinx-doc.org/en/master/",
        "sphobjinv" => "https://sphobjinv.readthedocs.io/en/stable/",
        "matplotlib" => "https://matplotlib.org/3.7.3/",
    )

    fallbacks = ExternalFallbacks(
        "makedocs" => "@extref Documenter.makedocs",
        "Other-Output-Formats" => "@extref Documenter `Other-Output-Formats`",
        "Inventory-File-Formats" => "@extref DocInventories `Inventory-File-Formats`",
    )

    Base.eval(Main, quote
        using DocInventories
        using DocumenterInterLinks
        PAGES = []  # We don't care about the order of pages for the test
    end)

    warnonly = [:cross_references,]
    if Documenter.DOCUMENTER_VERSION >= v"1.3.0-dev"
        warnonly = false
    end

    run_makedocs(
        joinpath(@__DIR__, "..", "docs");
        sitename="DocumenterInterLinks.jl",
        plugins=[links, fallbacks],
        format=Documenter.HTML(;
            prettyurls = true,
            canonical  = "https://juliadocs.github.io/DocumenterInterLinks.jl",
            footer     = "Generated by Test",
            edit_link  = "",
            repolink   = ""
        ),
        warnonly=warnonly,
        check_success=true
    ) do dir, result, success, backtrace, output

        inventory_file = joinpath(dir, "build", "objects.inv")
        @test isfile(inventory_file)
        if isfile(inventory_file)
            inventory = Inventory(inventory_file; root_url="")
            specs = [
                ":jl:type:`DocumenterInterLinks.InterLinks`",
                ":jl:method:`DocumenterInterLinks.find_in_interlinks-Tuple{InterLinks, AbstractString}`",
                ":std:doc:`api/internals`",
                # :doc: names should always use unix path separators
            ]
            for spec in specs
                @test !isnothing(inventory[spec])
            end
            for item in inventory
                # URIs should never use Windows path separators
                @test !contains(item.uri, "\\")
            end
        end

    end

end
