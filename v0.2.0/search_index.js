var documenterSearchIndex = {"docs":
[{"location":"#DocumenterInterLinks.jl","page":"Home","title":"DocumenterInterLinks.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nusing Pkg\n\nVERSION = Pkg.dependencies()[Base.UUID(\"d12716ef-a0f6-4df4-a9f1-a5a34e75c656\")].version\n\ngithub_badge = \"[![Github](https://img.shields.io/badge/JuliaDocs-DocumenterInterLinks.jl-blue.svg?logo=github)](https://github.com/JuliaDocs/DocumenterInterLinks.jl)\"\n\nversion_badge = \"![v$VERSION](https://img.shields.io/badge/version-v$(replace(\"$VERSION\", \"-\" => \"--\"))-green.svg)\"\n\nif get(ENV, \"DOCUMENTER_BUILD_PDF\", \"\") == \"\"\n    Markdown.parse(\"$github_badge $version_badge\")\nelse\n    Markdown.parse(\"\"\"\n    -----\n\n    On Github: [JuliaDocs/DocumenterInterLinks.jl](https://github.com/JuliaDocs/DocumenterInterLinks.jl)\n\n    Version: $VERSION\n\n    -----\n\n    \"\"\")\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocumenterInterLinks.jl is a plugin for Documenter.jl to link to external projects. It is interoperable with InterSphinx.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Load the package in your docs/make.jl file:\nusing DocumenterInterLinks\nThis is sufficient to generate and objects.inv file when the documentation is built with Documenter.makedocs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Define an InterLinks mapping and pass the resulting object as an element of plugins to Documenter.makedocs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use @extref like you would normally use @ref to resolve links via the mappings defined in InterLinks.","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [DocumenterInterLinks]","category":"page"},{"location":"internals/#DocumenterInterLinks.ExtCrossReferences","page":"Internals","title":"DocumenterInterLinks.ExtCrossReferences","text":"Pipeline step to expand all @extref cross-references.\n\nThis runs before Documenter.Builder.CrossReferences.\n\n\n\n\n\n","category":"type"},{"location":"internals/#DocumenterInterLinks.InterLinks","page":"Internals","title":"DocumenterInterLinks.InterLinks","text":"Plugin for enabling external links in Documenter.jl.\n\nlinks = InterLinks(\n    \"project1\" => \"https://project1.url/\",\n    \"project2\" => \"https://project2.url/inventory.file\",\n    \"project3\" => (\n        \"https://project3.url/\",\n        joinpath(@__DIR__, \"src\", \"interlinks\", \"inventory.file\")\n    );\n    default_inventory_file=\"objects.inv\"\n)\n\ninstantiates a plugin object that must be passed as an element of the plugins keyword argument to Documenter.makedocs. This then enables @extref links in the project's documentation to be resolved, see the Documentation for details.\n\nArguments\n\nThe InterLinks plugin receives mappings of project names to the project root URL and inventory locations. Each project names must be an alphanumerical ASCII string. For Julia projects, it should be the name of the package without the .jl suffix, e.g., \"Documenter\" for Documenter.jl. For Python projects, it should be the name of project's main module.\n\nThe root url / inventory location (the value of the mapping), can be given in any of the following forms:\n\nA single string with a URL of the inventory file, e.g.\n\"sphinx\" => \"https://www.sphinx-doc.org/en/master/objects.inv\"`\nThe root URL relative which all URIs inside the inventory are taken to be relative is everything up to the final slash in the inventory URL, \"https://www.sphinx-doc.org/en/master/\" in this case.\nA single string with a project root URL, for example,\n\"sphinx\" => \"https://www.sphinx-doc.org/en/master/\",`\nwhich must end with slash. This looks for the inventory file with the name corresponding to default_inventory_file directly underneath the given root URL.\nA tuple of strings, where the first element is the project root URL and all subsequent elements are locations (URLs or local file paths) to an inventory file, e.g.,\n\"Julia\" => (\n    \"https://docs.julialang.org/en/v1/\",\n    joinpath(@__DIR__, \"src\", \"interlinks\", \"Julia.toml\")\n),\n\"Documenter\" => (\n    \"https://documenter.juliadocs.org/stable/\",\n    \"https://documenter.juliadocs.org/stable/inventory.toml.gz\",\n    joinpath(@__DIR__, \"src\", \"interlinks\", \"Documenter.toml\")\n)\nThe first reachable inventory file will be used. This enables, e.g., to define a local inventory file as a fallback in case the online inventory file location is unreachable, as in the last example.\nA DocInventories.Inventory instance.\n\nProperties\n\nnames: A list of project names\ninventories: A dictionary of project names to DocInventories.Inventory instances\nrx: a Regex that matches any valid @extref expression that can be resolved.\n\nThe InterLinks object also acts as a (read-only) ordered dictionary so that, e.g., links[\"project1\"] returns the DocInventories.Inventory for that project.\n\nSearch\n\nFree-form search in a particular inventory is possible with, e.g.,\n\nlinks[\"Julia\"](search)\n\nSee the discussion on search in the DocInventories.Inventory documentation. Such a search returns a list of matching DocInventories.InventoryItem instances.\n\nIn addition,\n\nlinks(search)\n\nallows to search across all inventories. This returns a list of @extref strings that could be used to reference the matching items.\n\nMethods\n\nfind_in_interlinks(links, extref) â€“ find the URL for an extref\n\nSee also\n\nThe InterLinks mapping is deliberately reminiscent of the intersphinx_mapping setting in Sphinx.\n\n\n\n\n\n","category":"type"},{"location":"internals/#DocumenterInterLinks.WriteInventory","page":"Internals","title":"DocumenterInterLinks.WriteInventory","text":"Pipeline step to write the objects.inv inventory to the build directory.\n\nThis runs after Documenter.Builder.RenderDocument and only if Documenter was set up for HTML output.\n\n\n\n\n\n","category":"type"},{"location":"internals/#DocumenterInterLinks.find_in_interlinks-Tuple{InterLinks, AbstractString}","page":"Internals","title":"DocumenterInterLinks.find_in_interlinks","text":"Find an @extref link in any of the InterLinks inventories.\n\nurl = find_in_interlinks(links, extref)\n\nfinds extref in links and returns the full URL that resolves the link.\n\nArguments\n\nlinks: the [InterLinks] instance to resolve the reference in\nextref: a string of the form  \"@extref [inventory] [[:domain][:role]:]name\"\n\n\n\n\n\n","category":"method"}]
}
